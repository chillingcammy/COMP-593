WORK LOG:

April 18th: 30 minutes
-Investigated NASA API
-Looked into old labs whose code I could repurpose 
-Checked out Google results for "How to use NASA API python"
-Checked out Google results for "How to run a python script inside a powershell script (felt dumb googling this, kinda knew the answer but felt a little overwhelmed)



April 24th: 11:00am -12:30pm,  1:00pm - 4:00PM, 6:30-~9:30 (last session was kinda distracted)      7.5 Hours (5.0 solid focused hours)
-Generated an API key
-Set up script to check to see if C:\temp\NASA exists.
-Imported required modules, installed nasapy with pip
-Went on an adventure downloading packages that require each other. I'm not certain you want us to use the "nasapy" library but the instructions I found at
"https://www.educative.io/blog/how-to-use-api-nasa-daily-image" used it. Might scrap all this but throwing stuff at a wall and seeing what sticks.
-Looked into the example that I have here ^ they used a bunch of libraries I don't need. Still a really nice framework to go off of.
-Realised that today's image of the day is a video. Swapped my "Current_Date" variable to a date that has a picture.
-Decided I would use HD if avaliable otherwise I'd use the normal resolution image.
-Discussed nasapy library with other students and Joe. I've decided to use it today, get the script done and then go back and do it the real way if I have time.
-At 5:00 PM my script can download an image, calculate file size, make a hash of the contents of the file (opens and closes) and calculate the filesize in Kilobytes. 
-The filename system and a means to make a cache folder if it doesn't exist works too. Outputs are cleaned up (rounded, spaced nicely) and put into an array.
-Although the outline suggests using the hash value to checking the cache before downloading, I'm going to add another table to the database that uses just the date. This is the 
value that the script will check to see if the image has been downloaded before running the nasapy part. Starting to hate myself for taking the easy way out, going to try and clean
this up later.


April 27th: 7:00 pm - 8:00 pm  (1 hour)
-I didn't save my change log last night, nuts. Adding this in the morning.
-Realised my cache wasn't working as well as I thought it was. Spent some time troubleshooting and realised I forgot to add connection.commit() to a couple lines.
-Starting setting up the regex and related logic to check db for todays date and make sure the image doesn't already exist. 

April 28th 8:00 am - 10:00 am, 10:30am - 12:00 pm, 12:30-2:00 pm     (5 hours)

-Finished the regex lines. The script makes a list of dates that exist in the db, makes a regex search string equal to todays date and if the regex search evaluates to TRUE
then the Image_Grabber subroutine runs. Another regex searches for " Date.* " and if that regex evaulates to TRUE the Active_Image is set to that filepath. 
-Finally, I needed a way to get the value of this variable into PowerShell. I opted to output it to a file that gets deleted before each new interation that contains just the 
string of the filepath. 
-That's the python stuff done!
-The powershell stuff is a cinch, only 4 lines! Python runs the Lab_X.py script and the text file "Active_Image.txt" is created. $Active_Image uses Get-Content to read this string.
-I regret jinxing myself with that previous statement. Suddenly my variable isn't defined, I have my logic set up poorly. Troubleshooting by CTRL-Z'ing until I return to a place
where it works. My mistake was cleaning up code (sometimes I used raw strings and other times I used escape sequences, I must have made a mistake while cleaning this up. 
If its not broken, not going to fix it.)
-Realised there is a world of difference between re.match and re.search
-Need to implement the output that appears in the powershell terminal. 
-Frusterated by background sometimes updating and sometimes not. Bah.
-In the end, my script works but I wish I had done more. 

